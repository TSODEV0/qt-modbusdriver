# Telegraf Configuration for SCADA Core Service
# This configuration enables data collection from the SCADA service via Unix socket
# and forwards it to InfluxDB for storage and analysis

# Global tags can be specified here in key="value" format.
[global_tags]
  # Environment identifier
  environment = "scada_production"
  # Facility or plant identifier
  facility = "power_plant_01"
  # System identifier
  system = "modbus_scada"

# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "1s"
  
  ## Rounds collection interval to 'interval'
  round_interval = true
  
  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  metric_batch_size = 1000
  
  ## Maximum number of unwritten metrics per output.
  metric_buffer_limit = 10000
  
  ## Collection jitter is used to jitter the collection by a random amount.
  collection_jitter = "0s"
  
  ## Default flushing interval for all outputs.
  flush_interval = "1s"
  
  ## Jitter the flush interval by a random amount.
  flush_jitter = "0s"
  
  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval.
  precision = ""
  
  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false

###############################################################################
#                            OUTPUT PLUGINS                                  #
###############################################################################

# Configuration for sending metrics to InfluxDB 2.0
[[outputs.influxdb_v2]]
  ## The URLs of the InfluxDB cluster nodes.
  urls = ["http://localhost:8086"]
  
  ## Token for authentication.
  token = "your-influxdb-token-here"
  
  ## Organization is the name of the organization you wish to write to.
  organization = "scada_org"
  
  ## Destination bucket to write into.
  bucket = "scada_data"
  
  ## The value of this tag will be used to determine the bucket.
  # bucket_tag = ""
  
  ## If true, the bucket tag will not be added to the metric.
  # exclude_bucket_tag = false
  
  ## Timeout for HTTP messages.
  timeout = "5s"
  
  ## Additional HTTP headers
  # http_headers = {"X-Special-Header" = "Special-Value"}
  
  ## HTTP Proxy override, if unset values the standard proxy environment
  ## variables are consulted to determine which proxy, if any, should be used.
  # http_proxy = "http://corporate.proxy:3128"
  
  ## HTTP User-Agent
  # user_agent = "telegraf"
  
  ## Content-Encoding for write request body, can be set to "gzip" to
  ## compress body or "identity" to apply no encoding.
  # content_encoding = "gzip"
  
  ## Enable or disable uint support for writing uints influxdb 2.0.
  # influx_uint_support = false

# Alternative: Configuration for sending metrics to InfluxDB 1.x
# [[outputs.influxdb]]
#   ## The full HTTP or UDP URL for your InfluxDB instance.
#   urls = ["http://localhost:8086"]
#   
#   ## The target database for metrics; will be created as needed.
#   database = "scada_data"
#   
#   ## The value of this tag will be used to determine the database.
#   # database_tag = ""
#   
#   ## If true, the 'database_tag' will not be included in the written metric.
#   # exclude_database_tag = false
#   
#   ## If true, no CREATE DATABASE queries will be sent.
#   # skip_database_creation = false
#   
#   ## Name of existing retention policy to write to.
#   # retention_policy = ""
#   
#   ## The value of this tag will be used to determine the retention policy.
#   # retention_policy_tag = ""
#   
#   ## If true, the 'retention_policy_tag' will not be included in the written metric.
#   # exclude_retention_policy_tag = false
#   
#   ## Write consistency (clusters only), can be: "any", "one", "quorum", "all".
#   # write_consistency = "any"
#   
#   ## Timeout for HTTP messages.
#   timeout = "5s"
#   
#   ## HTTP Basic Auth
#   username = "telegraf"
#   password = "telegraf_password"

###############################################################################
#                            INPUT PLUGINS                                   #
###############################################################################

# Generic socket listener capable of handling multiple socket types.
[[inputs.socket_listener]]
  ## URL to listen on
  service_address = "unixgram:///tmp/telegraf.sock"
  
  ## Maximum number of concurrent connections.
  ## 0 (default) is unlimited.
  max_connections = 0
  
  ## Read timeout.
  ## 0 (default) is unlimited.
  read_timeout = "30s"
  
  ## Optional TLS configuration.
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key  = "/etc/telegraf/key.pem"
  
  ## Enables TLS client authentication.
  # tls_allowed_cacerts = ["/etc/telegraf/clientca.pem"]
  
  ## Maximum socket buffer size (in bytes when no unit specified).
  ## For stream sockets, once the buffer fills up, the sender will start backing up.
  ## For datagram sockets, once the buffer fills up, metrics will start dropping.
  ## Defaults to the OS default.
  # read_buffer_size = "64KiB"
  
  ## Period between keep alive probes.
  ## 0 disables keep alive probes.
  ## Defaults to the OS configuration.
  # keep_alive_period = "5m"
  
  ## Data format to consume.
  ## Each data format has its own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
  data_format = "influx"
  
  ## Set permissions for unix sockets
  socket_mode = "0666"

# Optional: System monitoring for the SCADA server itself
[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics
  collect_cpu_time = false
  ## If true, compute and report the sum of all non-idle CPU states
  report_active = false
  ## Add tags for CPU core identification
  [inputs.cpu.tags]
    component = "scada_server"

[[inputs.mem]]
  ## Add tags for memory monitoring
  [inputs.mem.tags]
    component = "scada_server"

[[inputs.disk]]
  ## By default stats will be gathered for all mount points.
  ## Set mount_points will restrict the stats to only the specified mount points.
  # mount_points = ["/"]
  
  ## Ignore mount points by filesystem type.
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]
  
  ## Add tags for disk monitoring
  [inputs.disk.tags]
    component = "scada_server"

[[inputs.diskio]]
  ## Add tags for disk I/O monitoring
  [inputs.diskio.tags]
    component = "scada_server"

[[inputs.net]]
  ## By default, telegraf gathers stats from any up interface (excluding loopback)
  ## Setting interfaces will tell it to gather these explicit interfaces,
  ## regardless of status.
  # interfaces = ["eth0"]
  
  ## Add tags for network monitoring
  [inputs.net.tags]
    component = "scada_server"

# Optional: Monitor Telegraf itself
[[inputs.internal]]
  ## If true, collect telegraf memory stats.
  collect_memstats = true
  
  ## Add tags for internal monitoring
  [inputs.internal.tags]
    component = "telegraf_agent"

###############################################################################
#                            PROCESSOR PLUGINS                               #
###############################################################################

# Optional: Add additional tags to all metrics
[[processors.enum]]
  ## Name of the field to map
  [[processors.enum.mapping]]
    ## Name of the field to map
    field = "value"
    ## Destination field or tag name
    # dest = "status"
    ## Default value to be used for non-matching values.
    ## If not provided, the original value will be used if no match is found.
    # default = 0
    ## Table of value mappings
    # [processors.enum.mapping.value_mappings]
    #   green = 1
    #   yellow = 2
    #   red = 3

###############################################################################
#                            AGGREGATOR PLUGINS                              #
###############################################################################

# Optional: Calculate statistics over time windows
[[aggregators.basicstats]]
  ## The period on which to flush & clear the aggregator.
  period = "30s"
  
  ## If true, the original metric will be dropped by the
  ## aggregator and will not get sent to the output plugins.
  drop_original = false
  
  ## Configures which basic stats to push as fields
  stats = ["count", "min", "max", "mean", "stdev", "s2", "sum"]
  
  ## Add tags to identify aggregated metrics
  [aggregators.basicstats.tags]
    aggregation = "30s_stats"

###############################################################################
#                            SERVICE INPUT PLUGINS                           #
###############################################################################

# Optional: HTTP listener for additional data sources
# [[inputs.http_listener_v2]]
#   ## Address and port to host HTTP listener on
#   service_address = ":8080"
#   
#   ## Path to listen to.
#   path = "/telegraf"
#   
#   ## HTTP methods to accept.
#   methods = ["POST", "PUT"]
#   
#   ## maximum duration before timing out read of the request
#   read_timeout = "10s"
#   ## maximum duration before timing out write of the response
#   write_timeout = "10s"
#   
#   ## Maximum allowed http request body size in bytes.
#   ## 0 means to use the default of 32MiB.
#   max_body_size = "32MiB"
#   
#   ## Part of the request to consume.  Available options are "body" and
#   ## "query".
#   data_source = "body"
#   
#   ## Set one or more allowed client CA certificate file names to
#   ## enable mutually authenticated TLS connections
#   # tls_allowed_cacerts = ["/etc/telegraf/clientca.pem"]
#   
#   ## Add a TLS certificate and key
#   # tls_cert = "/etc/telegraf/cert.pem"
#   # tls_key = "/etc/telegraf/key.pem"
#   
#   ## Data format to consume.
#   data_format = "influx"