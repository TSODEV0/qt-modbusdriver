/****************************************************************************
** Meta object code from reading C++ file 'scada_service_test.cpp'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.6.3)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qmetatype.h>

#if __has_include(<QtCore/qtmochelpers.h>)
#include <QtCore/qtmochelpers.h>
#else
QT_BEGIN_MOC_NAMESPACE
#endif


#include <memory>

#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'scada_service_test.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.6.3. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
QT_WARNING_DISABLE_GCC("-Wuseless-cast")
namespace {

#ifdef QT_MOC_HAS_STRINGDATA
struct qt_meta_stringdata_CLASSScadaServiceTestENDCLASS_t {};
constexpr auto qt_meta_stringdata_CLASSScadaServiceTestENDCLASS = QtMocHelpers::stringData(
    "ScadaServiceTest",
    "onDatabaseConnected",
    "",
    "onDatabaseError",
    "error",
    "onServiceStarted",
    "onServiceStopped",
    "onDataPointAcquired",
    "AcquiredDataPoint",
    "dataPoint",
    "onDataPointSentToInflux",
    "pointName",
    "success",
    "onErrorOccurred",
    "onStatisticsUpdated",
    "ScadaCoreService::ServiceStatistics",
    "stats",
    "onWriteCompleted",
    "requestId",
    "operation",
    "testWriteOperationsFromDatabase",
    "onWorkerCreated",
    "deviceKey",
    "onWorkerRemoved",
    "onGlobalStatisticsUpdated",
    "ModbusWorkerManager::GlobalStatistics",
    "onWorkerReadCompleted",
    "ModbusReadResult",
    "result",
    "onWorkerWriteCompleted",
    "ModbusWriteResult",
    "onWorkerError",
    "stopTest"
);
#else  // !QT_MOC_HAS_STRING_DATA
struct qt_meta_stringdata_CLASSScadaServiceTestENDCLASS_t {
    uint offsetsAndSizes[66];
    char stringdata0[17];
    char stringdata1[20];
    char stringdata2[1];
    char stringdata3[16];
    char stringdata4[6];
    char stringdata5[17];
    char stringdata6[17];
    char stringdata7[20];
    char stringdata8[18];
    char stringdata9[10];
    char stringdata10[24];
    char stringdata11[10];
    char stringdata12[8];
    char stringdata13[16];
    char stringdata14[20];
    char stringdata15[36];
    char stringdata16[6];
    char stringdata17[17];
    char stringdata18[10];
    char stringdata19[10];
    char stringdata20[32];
    char stringdata21[16];
    char stringdata22[10];
    char stringdata23[16];
    char stringdata24[26];
    char stringdata25[38];
    char stringdata26[22];
    char stringdata27[17];
    char stringdata28[7];
    char stringdata29[23];
    char stringdata30[18];
    char stringdata31[14];
    char stringdata32[9];
};
#define QT_MOC_LITERAL(ofs, len) \
    uint(sizeof(qt_meta_stringdata_CLASSScadaServiceTestENDCLASS_t::offsetsAndSizes) + ofs), len 
Q_CONSTINIT static const qt_meta_stringdata_CLASSScadaServiceTestENDCLASS_t qt_meta_stringdata_CLASSScadaServiceTestENDCLASS = {
    {
        QT_MOC_LITERAL(0, 16),  // "ScadaServiceTest"
        QT_MOC_LITERAL(17, 19),  // "onDatabaseConnected"
        QT_MOC_LITERAL(37, 0),  // ""
        QT_MOC_LITERAL(38, 15),  // "onDatabaseError"
        QT_MOC_LITERAL(54, 5),  // "error"
        QT_MOC_LITERAL(60, 16),  // "onServiceStarted"
        QT_MOC_LITERAL(77, 16),  // "onServiceStopped"
        QT_MOC_LITERAL(94, 19),  // "onDataPointAcquired"
        QT_MOC_LITERAL(114, 17),  // "AcquiredDataPoint"
        QT_MOC_LITERAL(132, 9),  // "dataPoint"
        QT_MOC_LITERAL(142, 23),  // "onDataPointSentToInflux"
        QT_MOC_LITERAL(166, 9),  // "pointName"
        QT_MOC_LITERAL(176, 7),  // "success"
        QT_MOC_LITERAL(184, 15),  // "onErrorOccurred"
        QT_MOC_LITERAL(200, 19),  // "onStatisticsUpdated"
        QT_MOC_LITERAL(220, 35),  // "ScadaCoreService::ServiceStat..."
        QT_MOC_LITERAL(256, 5),  // "stats"
        QT_MOC_LITERAL(262, 16),  // "onWriteCompleted"
        QT_MOC_LITERAL(279, 9),  // "requestId"
        QT_MOC_LITERAL(289, 9),  // "operation"
        QT_MOC_LITERAL(299, 31),  // "testWriteOperationsFromDatabase"
        QT_MOC_LITERAL(331, 15),  // "onWorkerCreated"
        QT_MOC_LITERAL(347, 9),  // "deviceKey"
        QT_MOC_LITERAL(357, 15),  // "onWorkerRemoved"
        QT_MOC_LITERAL(373, 25),  // "onGlobalStatisticsUpdated"
        QT_MOC_LITERAL(399, 37),  // "ModbusWorkerManager::GlobalSt..."
        QT_MOC_LITERAL(437, 21),  // "onWorkerReadCompleted"
        QT_MOC_LITERAL(459, 16),  // "ModbusReadResult"
        QT_MOC_LITERAL(476, 6),  // "result"
        QT_MOC_LITERAL(483, 22),  // "onWorkerWriteCompleted"
        QT_MOC_LITERAL(506, 17),  // "ModbusWriteResult"
        QT_MOC_LITERAL(524, 13),  // "onWorkerError"
        QT_MOC_LITERAL(538, 8)   // "stopTest"
    },
    "ScadaServiceTest",
    "onDatabaseConnected",
    "",
    "onDatabaseError",
    "error",
    "onServiceStarted",
    "onServiceStopped",
    "onDataPointAcquired",
    "AcquiredDataPoint",
    "dataPoint",
    "onDataPointSentToInflux",
    "pointName",
    "success",
    "onErrorOccurred",
    "onStatisticsUpdated",
    "ScadaCoreService::ServiceStatistics",
    "stats",
    "onWriteCompleted",
    "requestId",
    "operation",
    "testWriteOperationsFromDatabase",
    "onWorkerCreated",
    "deviceKey",
    "onWorkerRemoved",
    "onGlobalStatisticsUpdated",
    "ModbusWorkerManager::GlobalStatistics",
    "onWorkerReadCompleted",
    "ModbusReadResult",
    "result",
    "onWorkerWriteCompleted",
    "ModbusWriteResult",
    "onWorkerError",
    "stopTest"
};
#undef QT_MOC_LITERAL
#endif // !QT_MOC_HAS_STRING_DATA
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_CLASSScadaServiceTestENDCLASS[] = {

 // content:
      12,       // revision
       0,       // classname
       0,    0, // classinfo
      17,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags, initial metatype offsets
       1,    0,  116,    2, 0x08,    1 /* Private */,
       3,    1,  117,    2, 0x08,    2 /* Private */,
       5,    0,  120,    2, 0x08,    4 /* Private */,
       6,    0,  121,    2, 0x08,    5 /* Private */,
       7,    1,  122,    2, 0x08,    6 /* Private */,
      10,    2,  125,    2, 0x08,    8 /* Private */,
      13,    1,  130,    2, 0x08,   11 /* Private */,
      14,    1,  133,    2, 0x08,   13 /* Private */,
      17,    4,  136,    2, 0x08,   15 /* Private */,
      20,    0,  145,    2, 0x08,   20 /* Private */,
      21,    1,  146,    2, 0x08,   21 /* Private */,
      23,    1,  149,    2, 0x08,   23 /* Private */,
      24,    1,  152,    2, 0x08,   25 /* Private */,
      26,    2,  155,    2, 0x08,   27 /* Private */,
      29,    2,  160,    2, 0x08,   30 /* Private */,
      31,    2,  165,    2, 0x08,   33 /* Private */,
      32,    0,  170,    2, 0x08,   36 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void, QMetaType::QString,    4,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void, 0x80000000 | 8,    9,
    QMetaType::Void, QMetaType::QString, QMetaType::Bool,   11,   12,
    QMetaType::Void, QMetaType::QString,    4,
    QMetaType::Void, 0x80000000 | 15,   16,
    QMetaType::Void, QMetaType::LongLong, QMetaType::QString, QMetaType::Bool, QMetaType::QString,   18,   19,   12,    4,
    QMetaType::Void,
    QMetaType::Void, QMetaType::QString,   22,
    QMetaType::Void, QMetaType::QString,   22,
    QMetaType::Void, 0x80000000 | 25,   16,
    QMetaType::Void, QMetaType::LongLong, 0x80000000 | 27,   18,   28,
    QMetaType::Void, QMetaType::LongLong, 0x80000000 | 30,   18,   28,
    QMetaType::Void, QMetaType::QString, QMetaType::QString,   22,    4,
    QMetaType::Void,

       0        // eod
};

Q_CONSTINIT const QMetaObject ScadaServiceTest::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_CLASSScadaServiceTestENDCLASS.offsetsAndSizes,
    qt_meta_data_CLASSScadaServiceTestENDCLASS,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_CLASSScadaServiceTestENDCLASS_t,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<ScadaServiceTest, std::true_type>,
        // method 'onDatabaseConnected'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onDatabaseError'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const QString &, std::false_type>,
        // method 'onServiceStarted'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onServiceStopped'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onDataPointAcquired'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const AcquiredDataPoint &, std::false_type>,
        // method 'onDataPointSentToInflux'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const QString &, std::false_type>,
        QtPrivate::TypeAndForceComplete<bool, std::false_type>,
        // method 'onErrorOccurred'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const QString &, std::false_type>,
        // method 'onStatisticsUpdated'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const ScadaCoreService::ServiceStatistics &, std::false_type>,
        // method 'onWriteCompleted'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<qint64, std::false_type>,
        QtPrivate::TypeAndForceComplete<const QString &, std::false_type>,
        QtPrivate::TypeAndForceComplete<bool, std::false_type>,
        QtPrivate::TypeAndForceComplete<const QString &, std::false_type>,
        // method 'testWriteOperationsFromDatabase'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onWorkerCreated'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const QString &, std::false_type>,
        // method 'onWorkerRemoved'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const QString &, std::false_type>,
        // method 'onGlobalStatisticsUpdated'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const ModbusWorkerManager::GlobalStatistics &, std::false_type>,
        // method 'onWorkerReadCompleted'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<qint64, std::false_type>,
        QtPrivate::TypeAndForceComplete<const ModbusReadResult &, std::false_type>,
        // method 'onWorkerWriteCompleted'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<qint64, std::false_type>,
        QtPrivate::TypeAndForceComplete<const ModbusWriteResult &, std::false_type>,
        // method 'onWorkerError'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const QString &, std::false_type>,
        QtPrivate::TypeAndForceComplete<const QString &, std::false_type>,
        // method 'stopTest'
        QtPrivate::TypeAndForceComplete<void, std::false_type>
    >,
    nullptr
} };

void ScadaServiceTest::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<ScadaServiceTest *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->onDatabaseConnected(); break;
        case 1: _t->onDatabaseError((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1]))); break;
        case 2: _t->onServiceStarted(); break;
        case 3: _t->onServiceStopped(); break;
        case 4: _t->onDataPointAcquired((*reinterpret_cast< std::add_pointer_t<AcquiredDataPoint>>(_a[1]))); break;
        case 5: _t->onDataPointSentToInflux((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1])),(*reinterpret_cast< std::add_pointer_t<bool>>(_a[2]))); break;
        case 6: _t->onErrorOccurred((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1]))); break;
        case 7: _t->onStatisticsUpdated((*reinterpret_cast< std::add_pointer_t<ScadaCoreService::ServiceStatistics>>(_a[1]))); break;
        case 8: _t->onWriteCompleted((*reinterpret_cast< std::add_pointer_t<qint64>>(_a[1])),(*reinterpret_cast< std::add_pointer_t<QString>>(_a[2])),(*reinterpret_cast< std::add_pointer_t<bool>>(_a[3])),(*reinterpret_cast< std::add_pointer_t<QString>>(_a[4]))); break;
        case 9: _t->testWriteOperationsFromDatabase(); break;
        case 10: _t->onWorkerCreated((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1]))); break;
        case 11: _t->onWorkerRemoved((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1]))); break;
        case 12: _t->onGlobalStatisticsUpdated((*reinterpret_cast< std::add_pointer_t<ModbusWorkerManager::GlobalStatistics>>(_a[1]))); break;
        case 13: _t->onWorkerReadCompleted((*reinterpret_cast< std::add_pointer_t<qint64>>(_a[1])),(*reinterpret_cast< std::add_pointer_t<ModbusReadResult>>(_a[2]))); break;
        case 14: _t->onWorkerWriteCompleted((*reinterpret_cast< std::add_pointer_t<qint64>>(_a[1])),(*reinterpret_cast< std::add_pointer_t<ModbusWriteResult>>(_a[2]))); break;
        case 15: _t->onWorkerError((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1])),(*reinterpret_cast< std::add_pointer_t<QString>>(_a[2]))); break;
        case 16: _t->stopTest(); break;
        default: ;
        }
    }
}

const QMetaObject *ScadaServiceTest::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *ScadaServiceTest::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_CLASSScadaServiceTestENDCLASS.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int ScadaServiceTest::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 17)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 17;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 17)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 17;
    }
    return _id;
}
namespace {

#ifdef QT_MOC_HAS_STRINGDATA
struct qt_meta_stringdata_CLASSMultithreadedScadaTestsENDCLASS_t {};
constexpr auto qt_meta_stringdata_CLASSMultithreadedScadaTestsENDCLASS = QtMocHelpers::stringData(
    "MultithreadedScadaTests",
    "initTestCase",
    "",
    "testConcurrentWorkerCreation",
    "testThreadSafeStatistics",
    "testWorkerLifecycle",
    "cleanupTestCase"
);
#else  // !QT_MOC_HAS_STRING_DATA
struct qt_meta_stringdata_CLASSMultithreadedScadaTestsENDCLASS_t {
    uint offsetsAndSizes[14];
    char stringdata0[24];
    char stringdata1[13];
    char stringdata2[1];
    char stringdata3[29];
    char stringdata4[25];
    char stringdata5[20];
    char stringdata6[16];
};
#define QT_MOC_LITERAL(ofs, len) \
    uint(sizeof(qt_meta_stringdata_CLASSMultithreadedScadaTestsENDCLASS_t::offsetsAndSizes) + ofs), len 
Q_CONSTINIT static const qt_meta_stringdata_CLASSMultithreadedScadaTestsENDCLASS_t qt_meta_stringdata_CLASSMultithreadedScadaTestsENDCLASS = {
    {
        QT_MOC_LITERAL(0, 23),  // "MultithreadedScadaTests"
        QT_MOC_LITERAL(24, 12),  // "initTestCase"
        QT_MOC_LITERAL(37, 0),  // ""
        QT_MOC_LITERAL(38, 28),  // "testConcurrentWorkerCreation"
        QT_MOC_LITERAL(67, 24),  // "testThreadSafeStatistics"
        QT_MOC_LITERAL(92, 19),  // "testWorkerLifecycle"
        QT_MOC_LITERAL(112, 15)   // "cleanupTestCase"
    },
    "MultithreadedScadaTests",
    "initTestCase",
    "",
    "testConcurrentWorkerCreation",
    "testThreadSafeStatistics",
    "testWorkerLifecycle",
    "cleanupTestCase"
};
#undef QT_MOC_LITERAL
#endif // !QT_MOC_HAS_STRING_DATA
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_CLASSMultithreadedScadaTestsENDCLASS[] = {

 // content:
      12,       // revision
       0,       // classname
       0,    0, // classinfo
       5,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags, initial metatype offsets
       1,    0,   44,    2, 0x08,    1 /* Private */,
       3,    0,   45,    2, 0x08,    2 /* Private */,
       4,    0,   46,    2, 0x08,    3 /* Private */,
       5,    0,   47,    2, 0x08,    4 /* Private */,
       6,    0,   48,    2, 0x08,    5 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

Q_CONSTINIT const QMetaObject MultithreadedScadaTests::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_CLASSMultithreadedScadaTestsENDCLASS.offsetsAndSizes,
    qt_meta_data_CLASSMultithreadedScadaTestsENDCLASS,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_CLASSMultithreadedScadaTestsENDCLASS_t,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<MultithreadedScadaTests, std::true_type>,
        // method 'initTestCase'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testConcurrentWorkerCreation'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testThreadSafeStatistics'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testWorkerLifecycle'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'cleanupTestCase'
        QtPrivate::TypeAndForceComplete<void, std::false_type>
    >,
    nullptr
} };

void MultithreadedScadaTests::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<MultithreadedScadaTests *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->testConcurrentWorkerCreation(); break;
        case 2: _t->testThreadSafeStatistics(); break;
        case 3: _t->testWorkerLifecycle(); break;
        case 4: _t->cleanupTestCase(); break;
        default: ;
        }
    }
    (void)_a;
}

const QMetaObject *MultithreadedScadaTests::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *MultithreadedScadaTests::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_CLASSMultithreadedScadaTestsENDCLASS.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int MultithreadedScadaTests::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 5)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 5;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 5)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 5;
    }
    return _id;
}
QT_WARNING_POP
