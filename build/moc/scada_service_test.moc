/****************************************************************************
** Meta object code from reading C++ file 'scada_service_test.cpp'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.6.3)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qmetatype.h>

#if __has_include(<QtCore/qtmochelpers.h>)
#include <QtCore/qtmochelpers.h>
#else
QT_BEGIN_MOC_NAMESPACE
#endif


#include <memory>

#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'scada_service_test.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.6.3. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
QT_WARNING_DISABLE_GCC("-Wuseless-cast")
namespace {

#ifdef QT_MOC_HAS_STRINGDATA
struct qt_meta_stringdata_CLASSScadaServiceTestENDCLASS_t {};
constexpr auto qt_meta_stringdata_CLASSScadaServiceTestENDCLASS = QtMocHelpers::stringData(
    "ScadaServiceTest",
    "onServiceStarted",
    "",
    "onServiceStopped",
    "onDataPointAcquired",
    "AcquiredDataPoint",
    "dataPoint",
    "onDataPointSentToInflux",
    "pointName",
    "success",
    "onErrorOccurred",
    "error",
    "onStatisticsUpdated",
    "ScadaCoreService::ServiceStatistics",
    "stats",
    "stopTest"
);
#else  // !QT_MOC_HAS_STRING_DATA
struct qt_meta_stringdata_CLASSScadaServiceTestENDCLASS_t {
    uint offsetsAndSizes[32];
    char stringdata0[17];
    char stringdata1[17];
    char stringdata2[1];
    char stringdata3[17];
    char stringdata4[20];
    char stringdata5[18];
    char stringdata6[10];
    char stringdata7[24];
    char stringdata8[10];
    char stringdata9[8];
    char stringdata10[16];
    char stringdata11[6];
    char stringdata12[20];
    char stringdata13[36];
    char stringdata14[6];
    char stringdata15[9];
};
#define QT_MOC_LITERAL(ofs, len) \
    uint(sizeof(qt_meta_stringdata_CLASSScadaServiceTestENDCLASS_t::offsetsAndSizes) + ofs), len 
Q_CONSTINIT static const qt_meta_stringdata_CLASSScadaServiceTestENDCLASS_t qt_meta_stringdata_CLASSScadaServiceTestENDCLASS = {
    {
        QT_MOC_LITERAL(0, 16),  // "ScadaServiceTest"
        QT_MOC_LITERAL(17, 16),  // "onServiceStarted"
        QT_MOC_LITERAL(34, 0),  // ""
        QT_MOC_LITERAL(35, 16),  // "onServiceStopped"
        QT_MOC_LITERAL(52, 19),  // "onDataPointAcquired"
        QT_MOC_LITERAL(72, 17),  // "AcquiredDataPoint"
        QT_MOC_LITERAL(90, 9),  // "dataPoint"
        QT_MOC_LITERAL(100, 23),  // "onDataPointSentToInflux"
        QT_MOC_LITERAL(124, 9),  // "pointName"
        QT_MOC_LITERAL(134, 7),  // "success"
        QT_MOC_LITERAL(142, 15),  // "onErrorOccurred"
        QT_MOC_LITERAL(158, 5),  // "error"
        QT_MOC_LITERAL(164, 19),  // "onStatisticsUpdated"
        QT_MOC_LITERAL(184, 35),  // "ScadaCoreService::ServiceStat..."
        QT_MOC_LITERAL(220, 5),  // "stats"
        QT_MOC_LITERAL(226, 8)   // "stopTest"
    },
    "ScadaServiceTest",
    "onServiceStarted",
    "",
    "onServiceStopped",
    "onDataPointAcquired",
    "AcquiredDataPoint",
    "dataPoint",
    "onDataPointSentToInflux",
    "pointName",
    "success",
    "onErrorOccurred",
    "error",
    "onStatisticsUpdated",
    "ScadaCoreService::ServiceStatistics",
    "stats",
    "stopTest"
};
#undef QT_MOC_LITERAL
#endif // !QT_MOC_HAS_STRING_DATA
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_CLASSScadaServiceTestENDCLASS[] = {

 // content:
      12,       // revision
       0,       // classname
       0,    0, // classinfo
       7,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags, initial metatype offsets
       1,    0,   56,    2, 0x08,    1 /* Private */,
       3,    0,   57,    2, 0x08,    2 /* Private */,
       4,    1,   58,    2, 0x08,    3 /* Private */,
       7,    2,   61,    2, 0x08,    5 /* Private */,
      10,    1,   66,    2, 0x08,    8 /* Private */,
      12,    1,   69,    2, 0x08,   10 /* Private */,
      15,    0,   72,    2, 0x08,   12 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void, 0x80000000 | 5,    6,
    QMetaType::Void, QMetaType::QString, QMetaType::Bool,    8,    9,
    QMetaType::Void, QMetaType::QString,   11,
    QMetaType::Void, 0x80000000 | 13,   14,
    QMetaType::Void,

       0        // eod
};

Q_CONSTINIT const QMetaObject ScadaServiceTest::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_CLASSScadaServiceTestENDCLASS.offsetsAndSizes,
    qt_meta_data_CLASSScadaServiceTestENDCLASS,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_CLASSScadaServiceTestENDCLASS_t,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<ScadaServiceTest, std::true_type>,
        // method 'onServiceStarted'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onServiceStopped'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onDataPointAcquired'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const AcquiredDataPoint &, std::false_type>,
        // method 'onDataPointSentToInflux'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const QString &, std::false_type>,
        QtPrivate::TypeAndForceComplete<bool, std::false_type>,
        // method 'onErrorOccurred'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const QString &, std::false_type>,
        // method 'onStatisticsUpdated'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const ScadaCoreService::ServiceStatistics &, std::false_type>,
        // method 'stopTest'
        QtPrivate::TypeAndForceComplete<void, std::false_type>
    >,
    nullptr
} };

void ScadaServiceTest::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<ScadaServiceTest *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->onServiceStarted(); break;
        case 1: _t->onServiceStopped(); break;
        case 2: _t->onDataPointAcquired((*reinterpret_cast< std::add_pointer_t<AcquiredDataPoint>>(_a[1]))); break;
        case 3: _t->onDataPointSentToInflux((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1])),(*reinterpret_cast< std::add_pointer_t<bool>>(_a[2]))); break;
        case 4: _t->onErrorOccurred((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1]))); break;
        case 5: _t->onStatisticsUpdated((*reinterpret_cast< std::add_pointer_t<ScadaCoreService::ServiceStatistics>>(_a[1]))); break;
        case 6: _t->stopTest(); break;
        default: ;
        }
    }
}

const QMetaObject *ScadaServiceTest::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *ScadaServiceTest::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_CLASSScadaServiceTestENDCLASS.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int ScadaServiceTest::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 7)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 7;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 7)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 7;
    }
    return _id;
}
QT_WARNING_POP
