/****************************************************************************
** Meta object code from reading C++ file 'connection_resilience_test.cpp'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.6.3)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qmetatype.h>

#if __has_include(<QtCore/qtmochelpers.h>)
#include <QtCore/qtmochelpers.h>
#else
QT_BEGIN_MOC_NAMESPACE
#endif


#include <memory>

#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'connection_resilience_test.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.6.3. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
QT_WARNING_DISABLE_GCC("-Wuseless-cast")
namespace {

#ifdef QT_MOC_HAS_STRINGDATA
struct qt_meta_stringdata_CLASSConnectionResilienceTestENDCLASS_t {};
constexpr auto qt_meta_stringdata_CLASSConnectionResilienceTestENDCLASS = QtMocHelpers::stringData(
    "ConnectionResilienceTest",
    "testGoodConnectionConfig",
    "",
    "testPoorConnectionConfig",
    "testQualityDetection",
    "testConnectionMonitoring",
    "testErrorHandling",
    "testReconnectionLogic",
    "stopTest",
    "onConfigurationChanged",
    "description",
    "onConnectionQualityChanged",
    "ConnectionResilienceManager::ConnectionQuality",
    "quality",
    "onConnectionLost",
    "onConnectionRestored",
    "onReconnectionAttempt",
    "attempt",
    "maxAttempts",
    "onReconnectionSuccessful",
    "onErrorDetected",
    "error",
    "consecutiveFailures",
    "onMonitoringStarted",
    "host",
    "port",
    "onMonitoringStopped",
    "onModbusReadCompleted",
    "ModbusReadResult",
    "result",
    "onModbusWriteCompleted",
    "ModbusWriteResult",
    "onModbusConnectionStateChanged",
    "connected",
    "onModbusError"
);
#else  // !QT_MOC_HAS_STRING_DATA
struct qt_meta_stringdata_CLASSConnectionResilienceTestENDCLASS_t {
    uint offsetsAndSizes[70];
    char stringdata0[25];
    char stringdata1[25];
    char stringdata2[1];
    char stringdata3[25];
    char stringdata4[21];
    char stringdata5[25];
    char stringdata6[18];
    char stringdata7[22];
    char stringdata8[9];
    char stringdata9[23];
    char stringdata10[12];
    char stringdata11[27];
    char stringdata12[47];
    char stringdata13[8];
    char stringdata14[17];
    char stringdata15[21];
    char stringdata16[22];
    char stringdata17[8];
    char stringdata18[12];
    char stringdata19[25];
    char stringdata20[16];
    char stringdata21[6];
    char stringdata22[20];
    char stringdata23[20];
    char stringdata24[5];
    char stringdata25[5];
    char stringdata26[20];
    char stringdata27[22];
    char stringdata28[17];
    char stringdata29[7];
    char stringdata30[23];
    char stringdata31[18];
    char stringdata32[31];
    char stringdata33[10];
    char stringdata34[14];
};
#define QT_MOC_LITERAL(ofs, len) \
    uint(sizeof(qt_meta_stringdata_CLASSConnectionResilienceTestENDCLASS_t::offsetsAndSizes) + ofs), len 
Q_CONSTINIT static const qt_meta_stringdata_CLASSConnectionResilienceTestENDCLASS_t qt_meta_stringdata_CLASSConnectionResilienceTestENDCLASS = {
    {
        QT_MOC_LITERAL(0, 24),  // "ConnectionResilienceTest"
        QT_MOC_LITERAL(25, 24),  // "testGoodConnectionConfig"
        QT_MOC_LITERAL(50, 0),  // ""
        QT_MOC_LITERAL(51, 24),  // "testPoorConnectionConfig"
        QT_MOC_LITERAL(76, 20),  // "testQualityDetection"
        QT_MOC_LITERAL(97, 24),  // "testConnectionMonitoring"
        QT_MOC_LITERAL(122, 17),  // "testErrorHandling"
        QT_MOC_LITERAL(140, 21),  // "testReconnectionLogic"
        QT_MOC_LITERAL(162, 8),  // "stopTest"
        QT_MOC_LITERAL(171, 22),  // "onConfigurationChanged"
        QT_MOC_LITERAL(194, 11),  // "description"
        QT_MOC_LITERAL(206, 26),  // "onConnectionQualityChanged"
        QT_MOC_LITERAL(233, 46),  // "ConnectionResilienceManager::..."
        QT_MOC_LITERAL(280, 7),  // "quality"
        QT_MOC_LITERAL(288, 16),  // "onConnectionLost"
        QT_MOC_LITERAL(305, 20),  // "onConnectionRestored"
        QT_MOC_LITERAL(326, 21),  // "onReconnectionAttempt"
        QT_MOC_LITERAL(348, 7),  // "attempt"
        QT_MOC_LITERAL(356, 11),  // "maxAttempts"
        QT_MOC_LITERAL(368, 24),  // "onReconnectionSuccessful"
        QT_MOC_LITERAL(393, 15),  // "onErrorDetected"
        QT_MOC_LITERAL(409, 5),  // "error"
        QT_MOC_LITERAL(415, 19),  // "consecutiveFailures"
        QT_MOC_LITERAL(435, 19),  // "onMonitoringStarted"
        QT_MOC_LITERAL(455, 4),  // "host"
        QT_MOC_LITERAL(460, 4),  // "port"
        QT_MOC_LITERAL(465, 19),  // "onMonitoringStopped"
        QT_MOC_LITERAL(485, 21),  // "onModbusReadCompleted"
        QT_MOC_LITERAL(507, 16),  // "ModbusReadResult"
        QT_MOC_LITERAL(524, 6),  // "result"
        QT_MOC_LITERAL(531, 22),  // "onModbusWriteCompleted"
        QT_MOC_LITERAL(554, 17),  // "ModbusWriteResult"
        QT_MOC_LITERAL(572, 30),  // "onModbusConnectionStateChanged"
        QT_MOC_LITERAL(603, 9),  // "connected"
        QT_MOC_LITERAL(613, 13)   // "onModbusError"
    },
    "ConnectionResilienceTest",
    "testGoodConnectionConfig",
    "",
    "testPoorConnectionConfig",
    "testQualityDetection",
    "testConnectionMonitoring",
    "testErrorHandling",
    "testReconnectionLogic",
    "stopTest",
    "onConfigurationChanged",
    "description",
    "onConnectionQualityChanged",
    "ConnectionResilienceManager::ConnectionQuality",
    "quality",
    "onConnectionLost",
    "onConnectionRestored",
    "onReconnectionAttempt",
    "attempt",
    "maxAttempts",
    "onReconnectionSuccessful",
    "onErrorDetected",
    "error",
    "consecutiveFailures",
    "onMonitoringStarted",
    "host",
    "port",
    "onMonitoringStopped",
    "onModbusReadCompleted",
    "ModbusReadResult",
    "result",
    "onModbusWriteCompleted",
    "ModbusWriteResult",
    "onModbusConnectionStateChanged",
    "connected",
    "onModbusError"
};
#undef QT_MOC_LITERAL
#endif // !QT_MOC_HAS_STRING_DATA
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_CLASSConnectionResilienceTestENDCLASS[] = {

 // content:
      12,       // revision
       0,       // classname
       0,    0, // classinfo
      20,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags, initial metatype offsets
       1,    0,  134,    2, 0x08,    1 /* Private */,
       3,    0,  135,    2, 0x08,    2 /* Private */,
       4,    0,  136,    2, 0x08,    3 /* Private */,
       5,    0,  137,    2, 0x08,    4 /* Private */,
       6,    0,  138,    2, 0x08,    5 /* Private */,
       7,    0,  139,    2, 0x08,    6 /* Private */,
       8,    0,  140,    2, 0x08,    7 /* Private */,
       9,    1,  141,    2, 0x08,    8 /* Private */,
      11,    1,  144,    2, 0x08,   10 /* Private */,
      14,    0,  147,    2, 0x08,   12 /* Private */,
      15,    0,  148,    2, 0x08,   13 /* Private */,
      16,    2,  149,    2, 0x08,   14 /* Private */,
      19,    0,  154,    2, 0x08,   17 /* Private */,
      20,    2,  155,    2, 0x08,   18 /* Private */,
      23,    2,  160,    2, 0x08,   21 /* Private */,
      26,    0,  165,    2, 0x08,   24 /* Private */,
      27,    1,  166,    2, 0x08,   25 /* Private */,
      30,    1,  169,    2, 0x08,   27 /* Private */,
      32,    1,  172,    2, 0x08,   29 /* Private */,
      34,    1,  175,    2, 0x08,   31 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void, QMetaType::QString,   10,
    QMetaType::Void, 0x80000000 | 12,   13,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void, QMetaType::Int, QMetaType::Int,   17,   18,
    QMetaType::Void,
    QMetaType::Void, QMetaType::QString, QMetaType::Int,   21,   22,
    QMetaType::Void, QMetaType::QString, QMetaType::Int,   24,   25,
    QMetaType::Void,
    QMetaType::Void, 0x80000000 | 28,   29,
    QMetaType::Void, 0x80000000 | 31,   29,
    QMetaType::Void, QMetaType::Bool,   33,
    QMetaType::Void, QMetaType::QString,   21,

       0        // eod
};

Q_CONSTINIT const QMetaObject ConnectionResilienceTest::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_CLASSConnectionResilienceTestENDCLASS.offsetsAndSizes,
    qt_meta_data_CLASSConnectionResilienceTestENDCLASS,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_CLASSConnectionResilienceTestENDCLASS_t,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<ConnectionResilienceTest, std::true_type>,
        // method 'testGoodConnectionConfig'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testPoorConnectionConfig'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testQualityDetection'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testConnectionMonitoring'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testErrorHandling'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testReconnectionLogic'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'stopTest'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onConfigurationChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const QString &, std::false_type>,
        // method 'onConnectionQualityChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<ConnectionResilienceManager::ConnectionQuality, std::false_type>,
        // method 'onConnectionLost'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onConnectionRestored'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onReconnectionAttempt'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<int, std::false_type>,
        QtPrivate::TypeAndForceComplete<int, std::false_type>,
        // method 'onReconnectionSuccessful'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onErrorDetected'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const QString &, std::false_type>,
        QtPrivate::TypeAndForceComplete<int, std::false_type>,
        // method 'onMonitoringStarted'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const QString &, std::false_type>,
        QtPrivate::TypeAndForceComplete<int, std::false_type>,
        // method 'onMonitoringStopped'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onModbusReadCompleted'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const ModbusReadResult &, std::false_type>,
        // method 'onModbusWriteCompleted'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const ModbusWriteResult &, std::false_type>,
        // method 'onModbusConnectionStateChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<bool, std::false_type>,
        // method 'onModbusError'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const QString &, std::false_type>
    >,
    nullptr
} };

void ConnectionResilienceTest::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<ConnectionResilienceTest *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->testGoodConnectionConfig(); break;
        case 1: _t->testPoorConnectionConfig(); break;
        case 2: _t->testQualityDetection(); break;
        case 3: _t->testConnectionMonitoring(); break;
        case 4: _t->testErrorHandling(); break;
        case 5: _t->testReconnectionLogic(); break;
        case 6: _t->stopTest(); break;
        case 7: _t->onConfigurationChanged((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1]))); break;
        case 8: _t->onConnectionQualityChanged((*reinterpret_cast< std::add_pointer_t<ConnectionResilienceManager::ConnectionQuality>>(_a[1]))); break;
        case 9: _t->onConnectionLost(); break;
        case 10: _t->onConnectionRestored(); break;
        case 11: _t->onReconnectionAttempt((*reinterpret_cast< std::add_pointer_t<int>>(_a[1])),(*reinterpret_cast< std::add_pointer_t<int>>(_a[2]))); break;
        case 12: _t->onReconnectionSuccessful(); break;
        case 13: _t->onErrorDetected((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1])),(*reinterpret_cast< std::add_pointer_t<int>>(_a[2]))); break;
        case 14: _t->onMonitoringStarted((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1])),(*reinterpret_cast< std::add_pointer_t<int>>(_a[2]))); break;
        case 15: _t->onMonitoringStopped(); break;
        case 16: _t->onModbusReadCompleted((*reinterpret_cast< std::add_pointer_t<ModbusReadResult>>(_a[1]))); break;
        case 17: _t->onModbusWriteCompleted((*reinterpret_cast< std::add_pointer_t<ModbusWriteResult>>(_a[1]))); break;
        case 18: _t->onModbusConnectionStateChanged((*reinterpret_cast< std::add_pointer_t<bool>>(_a[1]))); break;
        case 19: _t->onModbusError((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1]))); break;
        default: ;
        }
    }
}

const QMetaObject *ConnectionResilienceTest::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *ConnectionResilienceTest::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_CLASSConnectionResilienceTestENDCLASS.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int ConnectionResilienceTest::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 20)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 20;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 20)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 20;
    }
    return _id;
}
QT_WARNING_POP
